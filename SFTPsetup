package com.nikh.sftp.setup;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;
import java.util.regex.Pattern;

import org.joda.time.DateTime;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;

public class SftpConnectionSetUp {

	private static Properties props;
	private static ChannelSftp sftp;
	private static Pattern file_pattern_check;
	private static Set<String> file_set;
	private static String bucket;
	
	public static Properties getProperties() {
		System.out.println("Fetching Connection Properties");
		Properties properties = new Properties();
		properties.setProperty("sftp_port", "22");
		properties.setProperty("sftp_working_dir", "sample/%d/");
		properties.put("StrictHostKeyChecking", "no");
		properties.setProperty("access_key", "");
		properties.setProperty("secret_key", "");
		System.out.println("Return Props");
		return properties;
	}

	public static Set<String> sftpGetConnection(Properties propsget)
			throws NumberFormatException, JSchException, SftpException, IOException {

		// TODO Fetch todays date
		int load_date = 20170317;
		Map<Integer, Integer> fileLoadMetadataMap = DynamoDAO.getFetchTime(load_date);


		for (Map.Entry<Integer, Integer> entry : fileLoadMetadataMap.entrySet()) {
			if (entry.getKey() == load_date) {
				int date = entry.getKey().intValue();
				int lastMTime = entry.getValue().intValue();
				sftpFiles(date, lastMTime);
			} else {
				int date = entry.getKey().intValue();
				int lastMTime = entry.getValue().intValue();
				sftpFiles(date, lastMTime); // SFTP previous date file
				sftpFiles(load_date, -1); // SFTP current date file and put entry in dynamo db
			}
		}

		return file_set;

	}

	private static void sftpFiles(int date, int lastMTime) throws JSchException, IOException, AmazonServiceException,
			SdkClientException, NumberFormatException, SftpException {

		JSch jsch = new JSch();
		Session session = null;
		Channel channel = null;
		ChannelSftp channelSftp = null;
		String clientRegion = "XX-XXXXXXXX-X";
		Properties propsget = getProperties();
		String access_key = propsget.getProperty("access_key");
		String secret_key = propsget.getProperty("secret_key");
		System.setProperty("aws.accessKeyId", access_key);
		System.setProperty("aws.secretKey", secret_key);
		AmazonS3 s3 = AmazonS3ClientBuilder.standard().withRegion(clientRegion)
				.withCredentials(new DefaultAWSCredentialsProviderChain()).build();
		String SFTPHOST = "X-XXXXXXXXXXXX.server.transfer.XX-XXXXXXXX-X.amazonaws.com";
		int SFTPPORT = 22;
		String SFTPUSER = "user";
		String privateKey = "X:\\Users\\XXXXXX\\XXXXX\\sshkey\\id_rsa";

		jsch.addIdentity(privateKey);
		System.out.println("Private Key Added.");
		session = jsch.getSession(SFTPUSER, SFTPHOST, SFTPPORT);
		System.out.println("session created.");

		java.util.Properties config = new java.util.Properties();
		DynamoPutRecords records = new DynamoPutRecords();
		String bucket_name = records.getBucket();

		config.put("StrictHostKeyChecking", "no");
		session.setConfig(config);
		session.connect();
		channel = session.openChannel("sftp");
		channel.connect();
		System.out.println("shell channel connected....");
		channelSftp = (ChannelSftp) channel;
		System.out.println("Getting File List");
		file_pattern_check = Pattern.compile(".7z");
		file_set = new HashSet<String>();

		String sftpWorkingDir = String.format(propsget.getProperty("sftp_working_dir"), date);
		System.out.println("sftpWorkingDir : " + sftpWorkingDir);
		int latestTime = 0;
		// TODO handle scenario when directory is not present in sftp location

		try {

			System.out.println("Stat : " + channelSftp.stat(sftpWorkingDir));
			Vector<ChannelSftp.LsEntry> list = channelSftp.ls(sftpWorkingDir);

			for (Object obj : list) {
				if (obj instanceof com.jcraft.jsch.ChannelSftp.LsEntry) {
					ChannelSftp.LsEntry entry = (ChannelSftp.LsEntry) obj;
					System.out.println(entry.getAttrs().getMTime());
					if (entry.getAttrs().getMTime() > lastMTime) {
						System.out.println("MTime \n" + entry.getAttrs().getMTime());
						System.out.println("FetchTime" + lastMTime);
						System.out.println("MTime Loop");
						System.out.println(entry.getFilename());
						// file_set.add(entry.getFilename());
						if (entry.getFilename().contains(".7z")) {
							System.out.println("File Matcher");
							file_set.add(entry.getFilename());
							System.out.println(file_set);
						}

					}

					for (String file : file_set) {
						System.out.println(file_set);
						System.out.println("Downloading File");
						File tempFile = File.createTempFile("sftp", ".download");
						FileOutputStream fileOutputStream = new FileOutputStream(tempFile);
						System.out.println("Putting to S3");
						channelSftp.get(sftpWorkingDir + file, fileOutputStream);
						fileOutputStream.flush();
						s3.putObject(bucket, file, tempFile);
						if (entry.getAttrs().getMTime() > latestTime) {
							latestTime = entry.getAttrs().getMTime();
							records.putRecords(date, entry.getAttrs().getMTime(), Integer.valueOf(bucket_name), file);
						}
					}

				}
			}

		} catch (SftpException e) {
			records.putRecords(date, lastMTime, lastMTime, "NULL");
		} finally {
			session.disconnect();
			channel.disconnect();
		}
	}



	public static void main(String[] args) throws NumberFormatException, JSchException, SftpException, IOException {
		bucket = "mock-data";
		props = getProperties();
		sftpGetConnection(props);
	}
}
